`ifndef __{:UPPERNAME:}_MONITOR_SVH_
`define __{:UPPERNAME:}_MONITOR_SVH_
 
class {:NAME:}_monitor extends uvm_monitor;
    /* == Configuration Handle == */
    {:NAME:}_config m_cfg;
    
    /* == Analysis Ports == */
    uvm_analysis_port #({:TRANSACTION:}) m_ap;

    /* == Virtual Interface == */
    virtual {:NAME:}_interface vif;
   
    /* == Component Fields == */

    `uvm_component_utils_begin({:NAME:}_monitor)
        `uvm_field_object(m_cfg, UVM_ALL_ON)
    `uvm_component_utils_end

    function new(string name, uvm_component parent );
        super.new(name, parent);
        m_ap = new("m_ap", this);
    endfunction: new
    
    /* == Phases == */
    extern virtual function void    build_phase(uvm_phase phase);
    extern virtual function void    connect_phase(uvm_phase phase);
    extern virtual task             run_phase(uvm_phase phase);

    /* == Methods == */
    extern virtual task collect_transactions(uvm_phase phase);
endclass: {:NAME:}_monitor

/* == Implementation == */

function void {:NAME:}_monitor::build_phase(uvm_phase phase);
    super.build_phase(phase);
    if (m_cfg == null) begin
        if (!uvm_config_db #({:NAME:}_config)::get(this, "", "m_cfg", m_cfg)) begin
            `uvm_fatal("CFG", "Missing configuration object!")
        end
    end
endfunction: build_phase

function void {:NAME:}_monitor::connect_phase(uvm_phase phase);
    super.connect_phase(phase);
    vif = m_cfg.vif;
endfunction: connect_phase

task {:NAME:}_monitor::run_phase(uvm_phase phase);
    super.run_phase(phase);
    fork 
        collect_transactions(phase);
    join
endtask: run_phase

task {:NAME:}_monitor::collect_transactions(uvm_phase phase);
    forever begin
        // TODO - sample pins
        #10ns;
    end
endtask: collect_transactions

`endif // _{:UPPERNAME:}_MONITOR_SVH_
