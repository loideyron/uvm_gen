`ifndef __{:UPPERNAME:}_BASE_SEQ_SVH_
`define __{:UPPERNAME:}_BASE_SEQ_SVH_

class {:NAME:}_base_seq extends {:BASE:};
    `uvm_object_utils({:NAME:}_base_seq)

    function new (string name="{:NAME:}_base_seq");
        super.new(name);
    endfunction: new

    /* == Methods == */
    extern virtual task pre_start;
    extern virtual task post_start;
endclass: {:NAME:}_base_seq

/* == Implementation == */

task {:NAME:}_base_seq::pre_start;
    uvm_info(get_type_name(), "SEQ_BEGIN", UVM_LOW) 
    if (starting_phase != null) begin
        `uvm_info(get_type_name(),
                  $sformatf("%s pre_start() raising %s objection",
                    get_sequence_path(), starting_phase.get_name()),
                  UVM_MEDIUM)
        starting_phase.raise_objection(this, get_type_name());
    end
endtask : pre_start

task {:NAME:}_base_seq::post_start;
    if (starting_phase != null) begin
        `uvm_info(get_type_name(),
                  $sformatf("%s post_start() dropping %s objection",
                    get_sequence_path(), starting_phase.get_name()),
                  UVM_MEDIUM)
        starting_phase.drop_objection(this, get_type_name());
    end
    uvm_info(get_type_name(), "SEQ_END", UVM_LOW) 
endtask : post_start

`endif // __{:UPPERNAME:}_BASE_SEQ_SVH_